spring:
  profiles:
    active: default,groq-cloud

  application:
    name: robert

  threads:
    virtual:
      enabled: true

  docker:
    compose:
      lifecycle-management: none

management:
  info:
    build:
      enabled: true
    git:
      mode: FULL
    java:
      enabled: true
    os:
      enabled: true
  endpoint:
    health:
      show-details: ALWAYS
    metrics:
      enabled: true
    prometheus:
      enabled: true
    env:
      enabled: true
      show-values: ALWAYS
    configprops:
      enabled: true
      show-values: ALWAYS
  endpoints:
    web:
      exposure:
        include: info,health,metrics,scheduledtasks,loggers,prometheus,sbom
        #include: configprops,env,info,health,metrics,scheduledtasks,loggers,prometheus,sbom
  tracing:
    sampling:
      probability: 1.0

---

spring:
  config:
    activate:
      on-profile: groq-cloud
    import: "optional:file:./config/creds.yml"

  ai:
    openai:
      base_url: https://api.groq.com/openai
      chat:
        options:
          model: llama-3.1-70b-versatile
          temperature: 0.8
      embedding:
        options:
          model: text-embedding-3-large

---

spring:
  config:
    activate:
      on-profile: ollama

  autoconfigure:
    exclude: org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration

  ai:
    openai:
      embedding:
        enabled: false
    ollama:
      chat:
        options:
          model: mistral

---

spring:
  config:
    activate:
      on-profile: advanced

  docker:
    compose:
      lifecycle-management: start-and-stop
      stop:
        command: down
        arguments: -v
      timeout: 1m

---

spring:
  config:
    activate:
      on-profile: chroma

  ai:
    vectorstore:
      chroma:
        initialize-schema: true

  docker:
    compose:
      file: ./docker-compose.chroma.yml

---

spring:
  config:
    activate:
      on-profile: pgvector

  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: postgres

  ai:
    vectorstore:
      pgvector:
        initialize-schema: true
        index-type: HNSW
        distance-type: COSINE_DISTANCE
        dimensions: 1536

  docker:
    compose:
      file: ./docker-compose.pgvector.yml

---

spring:
  config:
    activate:
      on-profile: postgresml

  datasource:
    url: jdbc:postgresql://localhost:5433/postgres
    username: postgres
    password: ""

  ai:
    openai:
      embedding:
        enabled: false
    vectorstore:
      pgvector:
        initialize-schema: true
        remove-existing-vector-store-table: true
        index-type: none
        distance-type: COSINE_DISTANCE
        dimensions: 4096
    postgresml:
      embedding:
        options:
          kwargs:
            device: cpu

  docker:
    compose:
      file: ./docker-compose.postgresml.yml