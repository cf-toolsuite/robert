plugins {
	id 'java'
	id 'org.cyclonedx.bom' version '2.1.0'
	id 'com.gorylenko.gradle-git-properties' version '2.4.2'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.eclipse.jkube.kubernetes' version '1.18.1'
}

group = 'org.cftoolsuite'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	maven { url 'https://packages.atlassian.com/repository/public' }
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

ext {
	set('springAiVersion', "1.0.0-M5")
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
	if (project.hasProperty('model-api-provider') && project.getProperty('model-api-provider') == 'ollama') {
		implementation 'org.springframework.ai:spring-ai-ollama-spring-boot-starter'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'chroma') {
		implementation 'org.springframework.ai:spring-ai-chroma-store-spring-boot-starter'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'pgvector') {
		implementation 'org.springframework.ai:spring-ai-pgvector-store-spring-boot-starter'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'redis') {
		implementation 'org.springframework.ai:spring-ai-redis-store-spring-boot-starter'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'weaviate') {
		implementation 'org.springframework.ai:spring-ai-weaviate-store-spring-boot-starter'
	}
	implementation 'org.apache.commons:commons-lang3'
	if (project.hasProperty('vector-db-provider') || project.hasProperty('model-api-provider')) {
		implementation 'io.micrometer:micrometer-tracing-bridge-otel'
		implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
	}
	implementation 'io.pivotal.cfenv:java-cfenv:3.3.0'
	implementation 'io.pivotal.cfenv:java-cfenv-boot:3.3.0'
	implementation 'com.cedarsoftware:json-io:4.33.0'
	implementation 'org.springframework.cloud:spring-cloud-bindings:2.0.4'
	implementation 'org.springframework.ai:spring-ai-spring-cloud-bindings'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'
	implementation 'org.apache.commons:commons-collections4:4.4'
	implementation 'com.github.javaparser:javaparser-core-serialization:3.26.3'
	implementation 'org.eclipse.jgit:org.eclipse.jgit:7.1.0.202411261347-r'
	implementation 'org.kohsuke:github-api:1.326'
	implementation ('org.gitlab4j:gitlab4j-api:5.8.0') {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
	implementation 'io.github.cdancy:bitbucket-rest:3.1.1'
	implementation 'io.github.hkarthik7:azd:6.0.1'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	archiveBaseName = project.findProperty('jarBaseName') ?: project.name
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

bootRun {
    systemProperties System.properties
}

tasks.named('bootBuildImage') {
	imageName = "docker.io/${project.group.contains('.') ? project.group.tokenize('.').last() : project.group}/${project.name}:${project.version}"
	tags = [ "docker.io/${project.group.contains('.') ? project.group.tokenize('.').last() : project.group}/${project.name}:latest" ]
}

jar {
    archiveBaseName = project.findProperty('jarBaseName') ?: project.name
}

kubernetes {
	buildStrategy = 'buildpacks'
    generator {
        config {
            'spring-boot' {
                color = 'always'
            }
        }
    }
    helm {
        maintainers = [{
            name = 'Chris Phillipson'
        }]
    }
}

tasks.register('setVersion') {
	doLast {
		def newVersion = project.hasProperty('newVersion') ? project.newVersion : version
		ant.propertyfile(file: "gradle.properties") {
			entry(key: "version", value: newVersion)
		}
	}
}

tasks.register('printArtifactPath') {
	doLast {
		println bootJar.archiveFile.get().asFile.absolutePath
	}
}
